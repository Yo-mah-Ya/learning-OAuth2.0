// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /auth)
	Auth(w http.ResponseWriter, r *http.Request, params AuthParams)

	// (POST /authcheck)
	AuthCheck(w http.ResponseWriter, r *http.Request)

	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)

	// (GET /token)
	Token(w http.ResponseWriter, r *http.Request, params TokenParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /auth)
func (_ Unimplemented) Auth(w http.ResponseWriter, r *http.Request, params AuthParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /authcheck)
func (_ Unimplemented) AuthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /token)
func (_ Unimplemented) Token(w http.ResponseWriter, r *http.Request, params TokenParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Auth operation middleware
func (siw *ServerInterfaceWrapper) Auth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthParams

	// ------------- Required query parameter "client_id" -------------

	if paramValue := r.URL.Query().Get("client_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "client_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "client_id", r.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "client_id", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Required query parameter "scope" -------------

	if paramValue := r.URL.Query().Get("scope"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "scope"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scope", r.URL.Query(), &params.Scope)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scope", Err: err})
		return
	}

	// ------------- Required query parameter "redirect_uri" -------------

	if paramValue := r.URL.Query().Get("redirect_uri"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "redirect_uri"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "redirect_uri", Err: err})
		return
	}

	// ------------- Required query parameter "response_type" -------------

	if paramValue := r.URL.Query().Get("response_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "response_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "response_type", r.URL.Query(), &params.ResponseType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "response_type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Auth(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthCheck operation middleware
func (siw *ServerInterfaceWrapper) AuthCheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Token operation middleware
func (siw *ServerInterfaceWrapper) Token(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TokenParams

	// ------------- Required query parameter "grant_type" -------------

	if paramValue := r.URL.Query().Get("grant_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "grant_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "grant_type", r.URL.Query(), &params.GrantType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grant_type", Err: err})
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "client_id" -------------

	if paramValue := r.URL.Query().Get("client_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "client_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "client_id", r.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "client_id", Err: err})
		return
	}

	// ------------- Required query parameter "redirect_uri" -------------

	if paramValue := r.URL.Query().Get("redirect_uri"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "redirect_uri"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "redirect_uri", Err: err})
		return
	}

	// ------------- Required query parameter "client_secret" -------------

	if paramValue := r.URL.Query().Get("client_secret"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "client_secret"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "client_secret", r.URL.Query(), &params.ClientSecret)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "client_secret", Err: err})
		return
	}

	var cookie *http.Cookie

	if cookie, err = r.Cookie("session"); err == nil {
		var value string
		err = runtime.BindStyledParameter("simple", true, "session", cookie.Value, &value)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "session", Err: err})
			return
		}
		params.Session = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Token(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth", wrapper.Auth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/authcheck", wrapper.AuthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token", wrapper.Token)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RX227cNhD9lQFbIDGgvaQp+qC3rdMiizYX5PKUGAZNzUqMJZLhjLzdGgvkH/ra/ly+",
	"pBhK2ou9mxh1mpcIO+TwzJy5HF8r45vgHTomlV8rMhU2On0+QyJdonyG6ANGtpgMzdbAq4AqV8TRulKt",
	"15mK+LG1EQuVv9scPMuGg/7iAxpWazlp3cKLjwLJRBvYeqdyNecHBKSbUCPMXs7hiTdtg45VpthyLU5e",
	"d1bL2MCLgG72cq4ydYWROhePxlO1zpQP6HSwKlePx9PxVGUqaK5SBBPdciUfJfJtCMmY7kctP80LlatZ",
	"92PQUTfIGEnl725efFMhzJ/AwkfgCqFAkkxASxgheF+DDgFMbdHxWEkCVK4+thhXKlNONxJbZz23hdpN",
	"JccWs56bg2m/ieShT1+6houWIaLxTYOuwOIERjCDqF3hG7jSdYvAlZact4QFsIcQ8Qodg4meaESWEQQI",
	"EktgJcYVPDx9/erXE9DM2lzSsVCINeP9wpgBBW1wRCh5ZyygtsTgF0DGByTBuwMuZb1Eh91Z9pfoaAzP",
	"PXdR5u8dSPxOWEpWsATe1audW3aR3Ej12KJ7R071z2Ax7pwI16HyDjPARts6A+0KCNEvbI0DPKNd5/4C",
	"tw7khd67JdA1+VvOZ3CV2AJtDBL1WHe9DWw1+hJ3Ckw6xui6JnlEL2lsfOks+zHZ0lk3lpNjXTTW7cd0",
	"jEIJ434USp7evvo95R90B9USFDai6UgCvWCMQG2KddHWIA2Ijq1J7XcMXMTOyXkb7f0wvkYWHJ8//W18",
	"gZ8//dMXkyUoo3YM4uE4DAreEZ6nZ76EA13byFiUR3Zm4gbXWbZxlqbUD9Pp7eE0A2m+bfVG5DY6qSoH",
	"Goz3lxbH7918AdqBLSSNvJK6vLIFRlhqAgpo7MJ2d6TWNy0UfQPEGOBR1hu6bkupSAb5/9KGkEpVuB0I",
	"1S37Rgtndb2CgZuOYHGlgyyRaDXjbVgP6AbnEHQpYbzgCuPSEnZ40BWbB/efqJgD5ZPJ7O2bp+dPXjyb",
	"zZ9Pal9aBw+XlTUVVJ6YOiQt+9G239/OT2BpuUo20g1CIhi2kx4I93Izfu+eYpSRgqvUlGgF5m4IuHW5",
	"bU4fgbBGw+AddmkVJzYWo6DjTjpomMnGu4UtW1kiu0uldAn5/japUBdpLV1LPY9OUyVsV/qhRkj/sm4b",
	"mgrNZdr1no7sxNN05NBiHCx9If3si5W4MN6xrO78WukQ6p7byR+j5XI5WvjYjNpYo5N+KPaR7guOoImW",
	"Pha3YW0st7opU5L4rkdv3tpYsq8ImJ2Dm5cOiZn1XTp3k2UYzt6PtQp1/QUV05kPc/Z0z3YI+hHqPpD4",
	"3kX3fcSFytV3k62OnPQicjIoyIT3KLptOvrA0mw7GldnvRnRm/7XL+qz7ZwXLny0fyYH54en/rGBn4xf",
	"n/Z32ox7OEBwDK3fC4B+eqa9fUwyyjq53/6Tqaepm3G7C8G6YeT9v3L1vwP4diJgI5mzQRol8S46KhFz",
	"bipd1+hKPLxEfbSlFcXdYz+Bz5/+SjLxQhP+9KOooFE/7CBiiEjouCO+3wWtqzRVWGSDQO/QdtpJHh1U",
	"37C90q2Xv53+chPhEUxfoZHQROT7pZGQ0p9h/UOdINlRlBvzcZ9nd52m32KQrjNFGK+GgdHGWqYTc8gn",
	"k9obXYtwyB9Pp1O1Plv/GwAA///r5wjdLw8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
